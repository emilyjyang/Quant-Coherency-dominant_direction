//@ File (label="Input directory",style="directory") inputdir
//@ File (label="Output directory",style="directory") outputdir
//@ int(label="Channel for actin", style = "spinner") Channel_Actin
//@ int(label="Channel for mito -- select 0 if none", style = "spinner") Channel_Mito
//@ string (label="File type", choices={".tif",".czi",".nd2",".ome.tiff"}, style="listBox") Type
//@ Integer(label="crop size",value=150) cropsize
//@ Boolean (label="Remove patches?") R_patch
//@ Boolean (label="Batch mode?") arg

//Save your masks in a folder named "Masks" with -mask at the end of the file name.

//AOC-Coherency.ijm
//Written by Emily Jie-Ning Yang
//ImageJ macro to quantify coherency of actin cable in yeast mother cell
//Input: multi/single channel of Z stack image. Super-resolution images are recommended.
//NEED TO SUPPLY MASK IMAGE GENERATED BY CELLPOSE!! MOTHER CELLS NEEDED TO BE SELECTED BY USER.

list = getFileList(inputdir);




for (a=0; a<list.length; a++) {
    setBatchMode(0);
    showProgress(a+1, list.length);
    filename = inputdir + File.separator+ list[a];
    Folder_Mask = inputdir+File.separator+ "x-Masks";
    Folder_Coherency = outputdir +File.separator+ "1-Coherency";
    Folder_Dominant_angle = outputdir +File.separator+ "2-Dominant_angle";
    if(Type == ".ome.tiff" ){
    Fname_temp = File.getNameWithoutExtension(filename);
    Fname = File.getNameWithoutExtension(Fname_temp);   
    }
    else{
     Fname = File.getNameWithoutExtension(filename);   	
    	}
    File.makeDirectory(Folder_Coherency);
    File.makeDirectory(Folder_Dominant_angle);
    print("\\Clear");
	roiManager("reset");
	roiManager("Show None");
	run("Clear Results");
	run("Collect Garbage");

    print(filename);
    print(list[a]);
    
    if (endsWith(filename, Type)) {
        roiManager("reset");
        run("Bio-Formats Importer", "open=" + filename + " autoscale color_mode=Default view=Hyperstack stack_order=XYCZT");
        //run("Bio-Formats Macro Extensions");
        //Ext.openImagePlus(filename);
        
        run("Select None");
        Stack.getDimensions(width, height, ch, slices, frames);
        imagewidth = width;
        imageheight = height;
        imageZstack = slices;
        id = getImageID();
        
        
        run("Set Measurements...", "bounding redirect=None decimal=9");
		run("Measure");
		px = width / getResult("Width");
        //Create Max Proj
        selectImage(id);
        run("Z Project...", "projection=[Max Intensity]");
        max_id =getImageID();
        title = getTitle();
        
        //Rename channels
        selectImage(max_id);
        if (ch!=1) {
        run("Split Channels");
        ActinChannel = "C"+Channel_Actin+"-"+title;
        selectWindow(ActinChannel);
        Actin_id = getImageID();
        run("View 100%");
        ActinChannel =getInfo("window.title");
        }
        else{       
        Actin_id = getImageID();
        run("View 100%");
        ActinChannel =getInfo("window.title");
        if (Channel_Mito != 0) {
			MitoChannel = "C"+Channel_Mito+"-"+title;
			selectWindow(MitoChannel);
			Mito_id = getImageID();
			}       
        }
		//open related mask
		
		run("Bio-Formats Importer", "open=" +Folder_Mask +File.separator+ Fname + "-max_cp_masks.png" + " autoscale color_mode=Default view=Hyperstack stack_order=XYCZT");
		Mask = getImageID();
		run("glasbey_on_dark");
		run("Set Measurements...", "min redirect=None decimal=9");
		run("Select None");
		run("Measure");
		cellpose_ROIn = getResult("Max", 1);
		run("Clear Results");
		
		if (R_patch == 1) {
		//// Actin_channel: create max projection, find background outside cells, save value
		selectImage(Actin_id);
		run("Duplicate...", " ");
		rename(Fname+"-Patch_mask");
		mask_patches =getTitle();
		mask_ID=getImageID();
		waitForUser("Adjust threshold of actin channel, only select actin patches. Press OK when you are done.");
		getThreshold(lower, upper);
		setThreshold(lower, upper, "raw");
		setOption("BlackBackground", true);
		run("Convert to Mask");
		run("Dilate");
		run("Invert");
		run("Divide...", "value=255");	
		imageCalculator("Multiply create 32-bit", ActinChannel, mask_patches);
		Actin_processed =getImageID();
		run("Select None");
		saveAs("tiff", outputdir+File.separator+Fname+"-patch_removed");
		selectImage(mask_ID);
		saveAs("tiff", outputdir+File.separator+Fname+"-patch_mask");
		selectImage(mask_ID);
		print("\\Clear");
		print("Threshold user,"+lower);
		selectWindow("Log");
		saveAs("Text", outputdir+ File.separator + Fname + "-actin_patch-threshold.txt");
		close();
		}
		else {
		selectImage(Actin_id);
		Actin_processed =getImageID();		
		}
		
		//Allow user select ROI
		
		run("Set Measurements...", "area mean integrated display redirect=None decimal=2");
		setTool("point");
		middleSlice = round(slices/2);
		Stack.setPosition(1,middleSlice,1);
		waitForUser("Mark cells", "click points and add to the ROI manager (press T after each),\nor open an ROI set.\nThen click OK");


		// rename ROIs for easier interpretation of results table

		n = roiManager("count");
		actinCoherencyArray = newArray(n);
		actinDominantArray = newArray(n);
		for (i = 0; i < n; i++) {
    	roiManager("Select", i);
    	newName = "ROI_"+i+1;
    	roiManager("Rename", newName);
		}
		roiManager("deselect");  
		roiManager("Save", outputdir+File.separator+Fname+"-CellnumberRoiSet.zip");
		run("Select None");
		run("Duplicate...", "use");
		run("Labels...", "color=white font=24 show draw");
		roiManager("Show All with labels");
		run("Flatten");
		markedImage = getImageID();
		saveAs("Tiff", outputdir+File.separator+"0-"+Fname+"-cells-marked.tif");
		
		//define major axis in the mother
		
		motherAxisAngleArray =newArray(n);
		roiManager("reset");
		setTool("line"); run("Line Width...", "line=1");
		run("Tile");
		waitForUser("Draw a line along mother-bud axis. Start at tip. Start from the first cell and finish all cells (press T after each). Click OK when done.");			
		for (i = 0; i < n; i++) {
    		run("Clear Results");
    		roiManager("Select", i);
    		newName = "Mother_Axis_"+i+1;
    		roiManager("Rename", newName);
   	 	getLine(M_x1, M_y1, M_x2, M_y2, lineWidth);
		run("Set Measurements...", "redirect=None decimal=9"); 
		run("Measure");
		motherAxisAngleArray[i] = getResult("Angle");
		}
		roiManager("deselect");  
		roiManager("Save", outputdir+File.separator+Fname+"-MotherAxisROISet.zip");	
			
		roiManager("reset");
		roiManager("open", outputdir+File.separator+Fname+"-CellnumberRoiSet.zip");
		selectImage(markedImage);
		close();
		selectImage(id);
		close();
		
		for (j = 0; j < n; j++) {
		setBatchMode(0);
		roiManager("reset");
		roiManager("open", outputdir+File.separator+Fname+"-CellnumberRoiSet.zip");
		selectImage(Actin_processed);
		nCell = j+1;
		pad_nCell = IJ.pad(nCell, 3);
		roiManager("Select", j);
		Roi.getCoordinates(x, y);		
		run("Select None");
		makeRectangle(x[0]-cropsize/2, y[0]-cropsize/2, cropsize, cropsize);
		run("Duplicate...", "duplicate");
		cropActinImage = getImageID();
		
		selectImage(Mask);
		run("Select None");
		makeRectangle(x[0]-cropsize/2, y[0]-cropsize/2, cropsize, cropsize);
		run("Duplicate...", "duplicate");
		cropMaskImage = getImageID();
		roiManager("reset");
		//run("Remove Border Labels", "left right top bottom");
		//cropMaskImage_killb = getImageID();
		//run("Label image to ROIs");
		
	
		
		//determine mother and bud
		roiManager("reset");
		//selectImage(cropmergedMAX);
		selectImage(cropMaskImage);
		run("Set... ", "zoom=200");
			
		setTool("wand");
		waitForUser("Select mother cell. Press OK when you are done.");
		//run("Enlarge...", "enlarge=.1");
		roiManager("Add");
		r_M = roiManager("count")-1;
			
		roiManager("Select", r_M);
		roiManager("Rename", "mother");
		roiManager("Save", outputdir+File.separator+Fname+"-cell"+pad_nCell+"-mother.roi");

		setBatchMode(arg);
		setBackgroundColor(0, 0, 0);
		selectImage(cropActinImage);
		
		roiManager("select", 0);		
		run("Clear Outside");
		run("Select None");
		selectImage(cropActinImage);
		run("Rotate... ", "angle=" +motherAxisAngleArray[j] + " grid=1 interpolation=Bilinear fill enlarge");
		saveAs("Tiff", outputdir+File.separator+Fname+"-cell"+pad_nCell+"-clear-rotated.tif");
		crop_actin_saved =getImageID();
		run("OrientationJ Dominant Direction");
		OJResults_actin_co = Table.get("Coherency [%]",0);
		actinCoherencyArray[j] = OJResults_actin_co;	
		OJResults_actin_da = Table.get("Orientation [Degrees]",0);
		actinDominantArray[j] = OJResults_actin_da;
		saveAs("Results", Folder_Coherency+File.separator+ Fname + "-Cell" + pad_nCell+ "-actin-coherency.csv");
			
			
		if (!File.exists(Folder_Coherency+ File.separator + Fname + "-actin-coherency-append.csv")) {
			print("\\Clear");
			print(OJResults_actin_co);
			selectWindow("Log");
			saveAs("txt", Folder_Coherency+ File.separator + Fname + "-actin-coherency-append.csv");
			print("\\Clear");
			};
		else {
			File.append(OJResults_actin_co, Folder_Coherency+ File.separator + Fname + "-actin-coherency-append.csv");
			print("\\Clear");
			}


		if (!File.exists(Folder_Dominant_angle+ File.separator + Fname + "-actin-DA-append.csv")) {
			print("\\Clear");
			print(OJResults_actin_da);
			selectWindow("Log");
			saveAs("txt", Folder_Dominant_angle+ File.separator + Fname + "-actin-DA-append.csv");
			print("\\Clear");
			};
		else {
			File.append(OJResults_actin_da, Folder_Dominant_angle+ File.separator + Fname + "-actin-DA-append.csv");
			print("\\Clear");
			}

			selectImage(crop_actin_saved);
			close();
			selectImage(cropMaskImage);
			close();
			//selectImage(cropMaskImage_killb);
			//close();
			
			
			close("Results");
			close("Summary");
			}
		
			
   
		}
	print("\\Clear");
	Array.print(actinCoherencyArray);
	selectWindow("Log");
	saveAs("txt", Folder_Coherency+ File.separator + Fname + "-actin-coherency-full.csv");
	print("\\Clear");
	Array.print(actinDominantArray);
	selectWindow("Log");
	saveAs("txt", Folder_Dominant_angle+ File.separator + Fname + "-actin-DA-full.csv");
	print("\\Clear");

close("*");
run("Close All");

		
		
	}
	
	


	
